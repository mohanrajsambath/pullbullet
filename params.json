{"name":"Pullbullet","tagline":"Android library for communication between activities, fragments, services, processes and for monitoring events like sms received, device shaken, call in, app opened and much more...","body":"We are always told that a bullet once shot shall hit the target, anyhow.\r\nWell...<br/>\r\nHere we pull it!\r\n\r\nIntroducing...\r\nPullBullet\r\n----------\r\n\r\nCommunication between activities, fragments and services in android has always been a very tedious task. PullBullet makes it awesomely simple. All you need is a gun !\r\nGun\r\n---\r\n\r\nA gun in pullbullet can shoot bullets and can also pull them. Every bullet has a unique serial number and also carries a tailtag which could further carry messages.\r\n\r\nEvery bullet also has a target. But while a bullet is heading towards its target, we can pull it for a while! Wondering how? You'll need a magnet !\r\n\r\nA magnet pulls a bullet between its path. But when a magnet has done its work, it has to release the bullet. So that the bullet continues on its path again.\r\n\r\nFollowing code will demonstrate this concept.    \r\n\r\n```java\r\n//In your activity\r\nGun.shoot(911,new TailTag().put(\"mykey\", \"This is a 911 emergency. Back off, right now.\"));\r\n//911 is the serial number of your bullet.\r\n//Or you could also use\r\nBullet bullet = new Bullet(911, new TailTag().put(\"mykey\", \"Another 911 emergency.\"));\r\nGun.shoot(bullet);\r\n\r\n//And plant a magnet in your service before the above shot to pull the bullet.\r\n\r\nGun.pull(911, new Magnet(){\r\n\r\n    @Override\r\n\tpublic void onStuck(Bullet bullet){\r\n\tString message = bullet.getTailTag().get(\"mykey\").toString();\r\n\tToast.makeText(this, message, Toast.LENGTH_LONG).show();\r\n    }\r\n}\r\n```\r\nAmazing! Isn't it?\r\n\r\nWell, a gun also has another interesting features, which you could check out at the [wiki][1] section! \r\n\r\nBut not everything can always be so simple.\r\nA Gun fails to shoot bullets between two processes!\r\nSo what then? Well, we also have a rifle !!!\r\nRifle\r\n-----\r\nA rifle is much similar to the gun. Except that it can also shoot between processes, unlike gun. This means, a rifle shoots everywhere!\r\n\r\nRifle uses intents and broadcasts, so it needs a context.\r\nUnlike gun, a rifle is not static. You have to make a new rifle instance for every component of your app. Like a rifle for an activity and another rifle for a service.\r\n\r\n```java\r\n//In your activity\r\nRifle rifle = new Rifle(getApplicationContext());\r\nrifle.shoot(999, new TailTag().put(\"mykey\", \"Hi from rifle.\"));\r\n//Or simply\r\nBullet bullet = new Bullet(999,new TailTag().put(\"mykey\", \"Hey from rifle!\"));\r\nrifle.shoot(bullet);\r\n\r\n//And in a service running under process :rifle\r\n\r\nRifle rifle = new Rifle(getApplicationContext());\r\nrifle.pull(999, new Magnet(){\r\n\r\n    @Override\r\n\tpublic void onStuck(Bullet bullet){\r\n\tString message = bullet.getTailTag().get(\"mykey\").toString();\r\n\tToast.makeText(this,message,Toast.LENGTH_LONG).show();\r\n    }\r\n}\r\n```\r\nFascinating, isn't it?\r\nWell, a rifle can do much more than this.\r\nIt has 66 power bullets. A power bullet is a bullet with power. You cannot shoot it on your own. A rifle shoots it automatically just for you! For example.\r\n\r\n```java\r\nrifle.pull(Bullet.SMS_IN, new Magnet(){\r\n\r\n\t//Bullet.SMS_IN has a serial of -5. All power bullets have negative serials.\r\n\r\n    @Override\r\n\tpublic void onStuck(Bullet bullet){\r\n\tString number = bullet.getTailTag().get(\"number\").toString();\r\n\tString name = bullet.getTailTag().get(\"name\").toString();\r\n\tString message = bullet.getTailTag().get(\"message\").toString();\r\n\tString toast = \"Got a message \"+message+\" from \"+name+\" (\"+number+\")\";\r\n\tToast.makeText(this,toast,Toast.LENGTH_LONG).show();\r\n    }\r\n}\r\n```\r\nFor more info about power bullets, head over to the [wiki][1] section.\r\n\r\nThere is one more type of bullet called as bullet di infinity. Remember, a magnet always releases a bullet when it has done its work? \r\n\r\nWhen all the magnets have released a bullet and there are no more magnets left on its path, a bullet hits its target ! In case it was fired from a gun, it bounces back with a serial of -1. This is an only power bullet of the gun. Again, if there are magnets listening for serial -1 on the return path, the bullet takes a rest at each magnet and finally it comes back to the gun! But in case of a rifle, the bullet won't bounce back. It is destroyed the moment it hits the target. \r\n\r\nBut what does this all have to do with bullet di infinity? You might be wondering. And you are right! It has no target!! It travels infinity!!!\r\n\r\nBullet di infinity\r\n-----------------    \r\nAs this bullet has no target, it can be pulled anytime!\r\n\r\n```java\r\nGun.shootInfinity(111, new TailTag().put(\"mykey\",\"message di infinty.\"));\r\n\r\n//And pull it anywhere, anytime!\r\nBullet bullet = Gun.pull(111, null);\r\nString message = bullet.getTailTag().get(\"mykey\").toString();\r\n//the message of infinity!!!\r\n```\r\nAmazed so far? Wanna go deeper?? Well, the [wiki][1] is yours!\r\n\r\nLicense\r\n=======\r\n\r\n\tCopyright (C) 2015 Vallabh Shevate\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n       http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n[1]: https://github.com/micronic/pullbullet/wiki","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}